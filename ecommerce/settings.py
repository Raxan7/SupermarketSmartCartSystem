"""
Django settings for ecommerce project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
from django.contrib.messages import constants as messages
import os
import cloudinary
import cloudinary.uploader
import cloudinary.api
import dj_database_url
# import environ

# env = environ.Env()
# environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = env('SECRET_KEY')
SECRET_KEY = "django-insecure-shfzstshi=+%g-@_=nc4_x=9xdpt1thdo=^k#($km%htb-se)("
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'store',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ecommerce.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecommerce.wsgi.application'

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'ecomm',
#         'USER': 'root',
#         'PASSWORD': '',
#         'HOST': 'localhost',
#         'PORT': '3306',
#         'OPTIONS': {
#             'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"
#         }
#     }
# }

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

DATABASES = {
    "default": dj_database_url.parse("postgres://ecommerce_knyv_user:e6FZcwGi9Z5HcqYa8rdrhX4EfhyxSOjk@dpg-copuq9kf7o1s73e7rso0-a.ohio-postgres.render.com/ecommerce_knyv")
}

# TODO
# Ecommerce
# Business Insights

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
STATIC_URL = '/static/'
STATIC_ROOT = (os.path.join(BASE_DIR, 'static/'))

AUTH_USER_MODEL = 'store.AuthUsers'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# These settings are configuring Django to use Gmail's SMTP server to send email notifications from
# the application. The `EMAIL_BACKEND` setting specifies the backend to use for sending emails, while
# the other settings specify the details of the SMTP server to use, including the host, port, and
# whether to use TLS encryption. The `EMAIL_HOST_USER` and `EMAIL_HOST_PASSWORD` settings specify the
# Gmail account credentials to use for authentication with the SMTP server.
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = env('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')

MESSAGE_TAGS = {
    messages.INFO: 'info-input',
    messages.SUCCESS: 'success-input',
    messages.ERROR: 'invalid-input',
}

# RECAPTCHA_PUBLIC_KEY = env('RECAPTCHA_PUBLIC_KEY')
# RECAPTCHA_PRIVATE_KEY = env('RECAPTCHA_PRIVATE_KEY')
# #  PAYMENT GATEWAY RELATED
# PAYMENT_KEY = env('PAYMENT_KEY')
# PAYMENT_SALT = env('PAYMENT_SALT')

EMAIL_BACKEND = "anymail.backends.mailjet.EmailBackend"
ANYMAIL = {
    "MAILJET_API_KEY": "f21e7fe3df212a1d545b365fb6e047dc",
    "MAILJET_SECRET_KEY": "8d0385af8e9a9fd76aace2b4692bdd7a",
    # "WEBHOOK_SECRET": str(os.getenv('WEBHOOK_SECRET')),
}
# DEFAULT_FROM_EMAIL = 'no-reply-akacha@raxan7.com'

# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# adding config
cloudinary.config(
  cloud_name = "dvbdol5uj",
  api_key = "463778388412657",
  api_secret = "-ohofO2WCM2YdwCgbGfocwCsGNs"
)